{

	"bloc": {
		"scope": "dart",
		"prefix": "mybloc",
		"body": [
			"import 'package:equatable/equatable.dart';",
			"import 'package:flutter_bloc/flutter_bloc.dart';",
			"",
			"class ${1:Bloc}State extends Equatable {",
			"  const ${1:Bloc}State({",
			"   required this.${3:state},",
			"  });",
			"",
			"  factory ${1:Bloc}State.initial() => const ${1:Bloc}State(${3:state}: ${4:''});",
			"",
			"  final ${2:String} ${3:state};",
			"",
			"  ${1:Bloc}State copyWith({${2:String}? ${3:state},}) => ${1:Bloc}State(",
			"      ${3:state}: ${3:state} ?? this.${3:state},",
			"    );",
			"",
			"  @override",
			"  List<Object?> get props => [${3:state}];",
			"}",
			"",
			"abstract class ${1:Bloc}Event extends Equatable {",
			"  const ${1:Bloc}Event();",
			"}",
			"",
			"class ${1:Bloc}${5:Fetched} extends ${1:Bloc}Event {",
			"  const ${1:Bloc}${5:Fetched}({",
			"    required this.${7:arg},",
			"  });",
			"",
			"  final ${6:String} ${7:arg};",
			"",
			"  @override",
			"  List<Object?> get props => [${7:arg}];",
			"}",
			"",
			"class ${1}Bloc extends Bloc<${1:Bloc}Event, ${1:Bloc}State> {",
			"  ${1}Bloc() : super(${1:Bloc}State.initial()) {",
			"    on<${1:Bloc}${5:Fetched}>((event, emit) async {",
			"     // TODO: implement event handler",
			"    });",
			"  }",
			"}",
			
		],
		"description": "Generate bloc"
	},
	"bloc try" : {
		"scope": "dart",
		"prefix": "bloctry",
		"body": [
			"await tryAsync<${4:int}>(",
			"action: () => ${1:action},",
			"onLoading: () => emit(${2:loading}),",
			"onFailure: (error, stackTrace) => emit(${3:error}),",
			"onSuccess: (data) async {",
			"  emit(state.copyWith());",
			"},",
		  	");",
		],
		"description": "Generate try in bloc"
	},
	"create a final field" : {
		"scope": "dart",
		"prefix": "ff",
		"body": [
			"final ${1:int} ${2:variable};"
		],
		"description": "create a final field"
	},
	"create constructor required arg" : {
		"scope": "dart",
		"prefix": "cra",
		"body": [
			"{",
			"   required this.${1:variable},",
			"}",
		],
		"description": "create optional required arg"
	},
	"media query size" : {
		"scope": "dart",
		"prefix": "mqs",
		"body": [
			"MediaQuery.of(context).size"
		],
		"description": "create Media query size"
	},
}