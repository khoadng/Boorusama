# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/generated_plugin_registrant.dart"
    - "**/firebase_options.dart"
  errors:
    unnecessary_lambdas: ignore
    invalid_annotation_target: ignore
    missing_required_param: error
    missing_return: error
    todo: ignore
    parameter_assignments: error

  plugins:
    - dart_code_metrics

linter:
  rules:
    - always_declare_return_types
    - always_put_control_body_on_new_line: false # we use this for oneline return statement
    - always_put_required_named_parameters_first: false # not crucial and we do it all around
    - always_require_non_null_named_parameters
    - always_specify_types: false # we use type inference
    - always_use_package_imports: false # we use relative for same folder imports
    - annotate_overrides
    - avoid_annotating_with_dynamic: false # we want to be explicit with dynamic
    # - avoid_as # deprecated
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catches_without_on_clauses: false # we catch both Exceptions and Errors
    - avoid_catching_errors
    - avoid_classes_with_only_static_members
    - avoid_double_and_int_checks
    - avoid_dynamic_calls: false
    - avoid_empty_else
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_final_parameters
    - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_init_to_null
    - avoid_js_rounded_ints
    - avoid_multiple_declarations_per_line
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_print
    - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    - avoid_relative_lib_imports
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    - avoid_returning_null: false # we do this commonly
    - avoid_returning_null_for_future
    - avoid_returning_null_for_void
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_as_parameter_names
    - avoid_types_on_closure_parameters: false # conflicts with always_specify_types
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - avoid_web_libraries_in_flutter
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - cancel_subscriptions
    - cascade_invocations
    - cast_nullable_to_non_nullable: false
    - close_sinks
    # - collection_methods_unrelated_type # not yet available in a stable SDK
    # - combinators_ordering # not yet available in a stable SDK
    - comment_references
    - conditional_uri_does_not_exist
    - constant_identifier_names: false # we are using those all around
    - control_flow_in_finally
    - curly_braces_in_flow_control_structures: false # we use this for oneline return statement
    - depend_on_referenced_packages
    - deprecated_consistency
    - diagnostic_describe_all_properties: false # nice to have for libs but overkill for applications
    - directives_ordering: false
    - discarded_futures: false
    - do_not_use_environment
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    - eol_at_end_of_file
    - exhaustive_cases
    - file_names
    - flutter_style_todos: false # don't need those for now
    - hash_and_equals
    - implementation_imports
    - invariant_booleans
    - iterable_contains_unrelated_type
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - library_names
    - library_prefixes
    - library_private_types_in_public_api
    - lines_longer_than_80_chars: false # we use it when temporarily adding strings before translations
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - missing_whitespace_between_adjacent_strings
    - no_adjacent_strings_in_list
    - no_default_cases
    - no_duplicate_case_values
    - no_leading_underscores_for_library_prefixes
    - no_leading_underscores_for_local_identifiers
    - no_logic_in_create_state
    - no_runtimeType_toString
    - non_constant_identifier_names
    - noop_primitive_operations
    - null_check_on_nullable_type_parameter
    - null_closures
    - omit_local_variable_types: false # opposite of always_specify_types
    - one_member_abstracts: false
    - only_throw_errors
    - overridden_fields
    - package_api_docs
    - package_names
    - package_prefixed_library_names
    - parameter_assignments
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message: false # we do this commonly
    # - prefer_bool_in_asserts # deprecated
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_contains
    - prefer_double_quotes: false # We use single quotes
    - prefer_equal_for_default_values
    - prefer_expression_function_bodies: false # conflicts with https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#consider-using--for-short-functions-and-methods
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_final_parameters: false # unnecessary
    - prefer_for_elements_to_map_fromIterable
    - prefer_foreach
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    - prefer_mixin
    - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    - prefer_relative_imports: false # we do not use relative imports
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    - provide_deprecation_message
    - public_member_api_docs: false # do not use for an application, only a library
    - recursive_getters
    - require_trailing_commas: false # use dart_code_metric instead
    - secure_pubspec_urls
    - sized_box_for_whitespace
    - sized_box_shrink_expand
    - slash_for_doc_comments
    - sort_child_properties_last
    - sort_constructors_first
    - sort_pub_dependencies
    - sort_unnamed_constructors_first
    # - super_goes_last # deprecated
    - test_types_in_equals
    - throw_in_finally
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis: false # subset of always_specify_types
    - type_init_formals
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_constructor_name
    - unnecessary_final: false # having finals is the preferred approach
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_late
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_aware_operator_on_extension_on_nullable
    - unnecessary_null_checks
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_statements
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - unnecessary_to_list_in_spreads
    # - unreachable_from_main # not yet available in a stable SDK
    - unrelated_type_equality_checks
    - unsafe_html
    # - use_build_context_synchronously # not yet available in a stable SDK
    - use_colored_box
    - use_decorated_box: false # broke the app, don't know how to fix yet so disable for now
    - use_enums
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_key_in_widget_constructors
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_string_buffers
    # - use_string_in_part_of_directives # not yet available in a stable SDK
    - use_super_parameters
    - use_test_throws_matchers
    - use_to_and_as_if_applicable
    - valid_regexps
    - void_checks

dart_code_metrics:
  anti-patterns:
  metrics:
    cyclomatic-complexity: 20
    halstead-volume: 150
    lines-of-code: 100
    maintainability-index: 50
    maximum-nesting-level: 5
    number-of-methods: 10
    number-of-parameters: 4
    source-lines-of-code: 50
    technical-debt:
      threshold: 1
      todo-cost: 161
      ignore-cost: 320
      ignore-for-file-cost: 396
      as-dynamic-cost: 322
      deprecated-annotations-cost: 37
      file-nullsafety-migration-cost: 41
      unit-type: "USD"
    # weight-of-class: 0.33

  metrics-exclude:
    - test/**
  rules:
    - newline-before-return
    - no-boolean-literal-compare
    - no-empty-block
    - prefer-trailing-comma
    - prefer-conditional-expressions
    - no-equal-then-else
    - avoid-cascade-after-if-null
    - avoid-collection-methods-with-unrelated-types
    - avoid-duplicate-exports
    - avoid-global-state
    # - avoid-ignoring-return-values
    - avoid-missing-enum-constant-in-map
    # - avoid-non-ascii-symbols
    # - avoid-non-null-assertion
    # - avoid-passing-async-when-sync-expected
    # - avoid-redundant-async # need it to implement async method with sync implementation
    - avoid-throw-in-catch-block
    # - avoid-top-level-members-in-tests # we need it for common test functions
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - binary-expression-operand-order
    - double-literal-format
    - missing-test-assertion
    - no-equal-then-else
    # - no-magic-number
    - no-object-declaration
    - prefer-correct-test-file-name
    - prefer-correct-type-name:
        min-length: 3
        max-length: 60
    - prefer-first
    - prefer-immediate-return
    - prefer-iterable-of
    - prefer-last

    ## Flutter ##
    - always-remove-listener
    - avoid-border-all
    # - avoid-returning-widgets
    # - avoid-shrink-wrap-in-lists # Add it later
    - avoid-unnecessary-setstate
    # - avoid-use-expanded-as-spacer
    - avoid-wrapping-in-padding
    - check-for-equals-in-render-object-setters
    - consistent-update-render-object
    - prefer-const-border-radius
    - prefer-correct-edge-insets-constructor
    # - prefer-extracting-callbacks
    - prefer-single-widget-per-file:
        ignore-private-widgets: true

















